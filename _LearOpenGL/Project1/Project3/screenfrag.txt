#version 330 core
uniform sampler2D screenTexture;
in vec2 Texcoords;
out vec4 fragColor;
const float offset=1.0/300;//自定义的步长偏移
void main()
{
	//卷积操作
	vec2 offsets[9]=vec2 []//9个相邻的像素uv偏移位置
	(
		vec2(-offset,  offset), // 左上
        vec2( 0.0f,    offset), // 正上
        vec2( offset,  offset), // 右上
        vec2(-offset,  0.0f),   // 左
        vec2( 0.0f,    0.0f),   // 中
        vec2( offset,  0.0f),   // 右
        vec2(-offset, -offset), // 左下
        vec2( 0.0f,   -offset), // 正下
        vec2( offset, -offset)  // 右下
	);

	/*float kernel[9]=float[](//锐化卷积核
		-1, -1, -1,
        -1,  9, -1,
        -1, -1, -1
	);*/

	/*float kernel[9] = float[](//模糊卷积核
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
	);*/

float kernel[9] = float[](//边缘检测卷积核
    1,1,1,
	1,-8,1,
	1,1, 1
);

	vec3 samplerTex[9];//每一块像素在纹理上采样获得的颜色结果
	for(int i=0;i<9;i++)
		samplerTex[i]=vec3(texture(screenTexture,Texcoords.st+offsets[i]));
	
	vec3 res=vec3(0);
	for(int i=0;i<9;i++){
		res+=samplerTex[i]*kernel[i];//9块像素各自成以对应卷积的值再相加，即完成了本像素区域的卷积操作
	}

	//fragColor=vec4(res,1.0);
	fragColor=texture(screenTexture,Texcoords);

	//fragColor=texture(screenTexture,Texcoords);

	//颜色反相
	//fragColor=vec4(vec3(1-texture(screenTexture,Texcoords)),1);

	//灰度图
	//float ave=0.2126 * fragColor.r + 0.7152 * fragColor.g + 0.0722 * fragColor.b;
	//fragColor=vec4(ave,ave,ave,1);  

	//人眼会对绿色更加敏感一些，而对蓝色不那么敏感，所以采用权重分配给每个通道，达到更精确的效果
}