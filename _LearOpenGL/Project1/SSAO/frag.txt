#version 330 core

struct Light{
	vec3 position;
	vec3 color;
	float linear;//光衰减一次项系数
	float quadratic;//二次项系数
};

in vec2 Texcoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D ssao;

uniform vec3 viewPos;

uniform Light light;

out vec4 fragColor;

void main()
{
	vec3 fragPos=texture(gPosition,Texcoords).rgb;
	vec3 normal=texture(gNormal,Texcoords).rgb;
	vec3 Diffuse=texture(gAlbedo,Texcoords).rgb;
	float occlusion=texture(ssao,Texcoords).r;

	vec3 ambient=vec3(0.3*occlusion*Diffuse);
	//diffuse
	//vec3 viewDir=normalize(viewPos-fragPos);
	vec3 viewDir=normalize(-fragPos);
	vec3 lightDir=normalize(light.position-fragPos);
	float diff=max(0,dot(lightDir,normal));
	vec3 diffuse=light.color*diff*Diffuse;
	//specular
	vec3 halfDir=normalize(lightDir+viewDir);
	float spec=pow(max(0,dot(halfDir,normal)),8);
	vec3 specular=light.color*spec;
	//衰减
	float distance=length(light.position-fragPos);
	float atten=1.0/(1+light.linear*distance+light.quadratic*distance*distance);
	diffuse*=atten;
	specular*=atten;

	fragColor=vec4(ambient+diffuse+specular,1);

}