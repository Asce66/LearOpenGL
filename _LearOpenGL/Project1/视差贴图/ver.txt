#version 330 core
layout(location=0)in vec3 aPos;
layout(location=1)in vec3 aNormal;
layout(location=2)in vec2 aTexcoords;
layout(location=3)in vec3 aTangent;
layout(location=4)in vec3 aBiTangent;

out VS_OUT{
	vec3 TangentNormal;
	vec3 TangentFragPos;
	vec3 TangentViewPos;
	vec3 TangentLightPos;
	vec2 Texcoords;
}vs_out;

uniform vec3 viewPos,lightPos;

uniform mat4 projection,view,model;

void main()
{
	gl_Position=projection*view*model*vec4(aPos,1);

	vec3 T=normalize(mat3(model)*aTangent);
	vec3 B=normalize(mat3(model)*aBiTangent);
	vec3 N=normalize(mat3(model)*aNormal);

	mat3 TBN=transpose(mat3(T,B,N));
	vs_out.TangentNormal=TBN*aNormal;
	vec3 fragPos=vec3(model*vec4(aPos,1));
	vs_out.TangentFragPos=TBN*fragPos;
	vs_out.TangentViewPos=TBN*viewPos;
	vs_out.TangentLightPos=TBN*lightPos;
	vs_out.Texcoords=aTexcoords;

}