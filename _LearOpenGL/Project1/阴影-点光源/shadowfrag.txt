#version 330 core

in VS_OUT{
	vec3 FragPos;
	vec3 Normal;
	vec2 Texcoords;
}vs_in;

uniform sampler2D diffuseTexture;
uniform samplerCube depthMap;
uniform vec3 lightPos,viewPos;
uniform float far_plane;

out vec4 fragColor;

//该片段周围的采样片段
vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

float ShadowCalculation(vec3 fragPos)
{
	float bias=0.15;
	float shadow=0;
	int samples=20;
	float viewDistance=length(fragPos-viewPos);
	//根据观察的距离来增加偏移量，效果为距离越远阴影越柔和，越近越锐利
	float diskRadius=(1+viewDistance/far_plane)/25.0;//偏移量
	for(int i=0;i<samples;i++)
	{
		//获得从片段到光源的方向向量（不需要单位化，用于立方体贴图采样）
		vec3 fragToLight=lightPos-fragPos;
		float closestDpeth=texture(depthMap,fragToLight+sampleOffsetDirections[i]*diskRadius).r;
		closestDpeth*=far_plane;//在绘制深度贴图的shader中我们把深度值除以far_plane，这里就还原一下
		float currentDepth=length(fragToLight);
		 shadow+=currentDepth-bias>closestDpeth?1:0;
	}
	
	return shadow/samples;
}

void main()
{
	vec3 color = texture(diffuseTexture, vs_in.Texcoords).rgb;
	vec3 normal=normalize(vs_in.Normal);
	vec3 lightColor=vec3(0.6);
	//环境光
	vec3 ambient=lightColor;
	//漫反射
	vec3 lightDir=normalize(lightPos-vs_in.FragPos);
	float diff=max(0,dot(lightDir,normal));
	vec3 diffuse=lightColor*diff;
	//镜面反射
	vec3 viewDir=normalize(viewPos-vs_in.FragPos);
	vec3 halfDir=normalize(lightDir+viewDir);
	float spec=pow(max(dot(halfDir,normal),0),64);
	vec3 specular=lightColor*spec;
	//计算阴影
	float shadow=ShadowCalculation(vs_in.FragPos);
	vec3 finalColor=(ambient+(1-shadow))*(diffuse+specular)*color;
	fragColor=vec4(finalColor,1);
}