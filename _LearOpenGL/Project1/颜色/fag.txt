#version 330 core

struct Material{//物体材质的结构体
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emmit;
	float shininess;
};
struct DirLight{
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;	
};

struct PointLight{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;	
	//光强度衰减系数
	float constant;
	float linear;
	float quadratic;
};

struct SpotLight{
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float cutOff;
	float outCutOff;

	//光强度衰减系数
	float constant;
	float linear;
	float quadratic;
};

#define POINTLIGHTCOUNT 4
out vec4 frageColor;
in vec3 fragePos;//顶点的位置
uniform vec3 viewPos;//观察者位置
in vec3 normal;//顶点的法向量
uniform Material material;//材质
in vec2 TexCoords;
uniform DirLight dirLight;
uniform PointLight pointLights[POINTLIGHTCOUNT];
uniform SpotLight spotLight;

vec3 CalcDirLight(vec3 viewDir,vec3 normal);

vec3 CalcPointLight(PointLight pointLight,vec3 fragPos,vec3 normal,vec3 viewDir);

vec3 CalcSpotLight(SpotLight spotLight,vec3 fragePos,vec3 normal,vec3 viewDir);

void main(){
		vec3 viewDir=normalize(viewPos-fragePos);

		vec3 normalDir=normalize(normal);

		vec3 result=CalcDirLight(viewDir,normalDir);
		for(int i=0;i<4;i++)
			result+=CalcPointLight(pointLights[i],fragePos,normalDir,viewDir);

		result+=CalcSpotLight(spotLight,fragePos,normal,viewDir);

		frageColor=vec4(result,1.0);
}

vec3 CalcDirLight(vec3 viewDir,vec3 normal)
{
	vec3 lightDir=normalize(-dirLight.direction);
	vec3 diffuseTex=texture(material.diffuse,TexCoords).rgb;

	vec3 ambient=dirLight.ambient*diffuseTex;

	vec3 diffuse=max(dot(lightDir,normal),0)*diffuseTex;

	vec3 refleDir=reflect(-lightDir,normal);
	vec3 specular=pow(max(dot(refleDir,viewDir),0),material.shininess)*texture(material.specular,TexCoords).rgb;

	return  ambient+diffuse+specular;
}

vec3 CalcPointLight(PointLight pointLight,vec3 fragPos,vec3 normal,vec3 viewDir)
{
	vec3 lightDir=normalize(pointLight.position-fragPos);
	vec3 diffuseTex=texture(material.diffuse,TexCoords).rgb;
	float distance=length(pointLight.position-fragPos);
	float attenuation=1.0/(pointLight.constant+pointLight.linear*distance+pointLight.quadratic*distance*distance);

	vec3 ambient=pointLight.ambient*diffuseTex*attenuation;

	vec3 diffuse=pointLight.diffuse*max(dot(lightDir,normal),0)*diffuseTex*attenuation;

	vec3 refleDir=reflect(-lightDir,normal);
	vec3 specular=pointLight.specular*pow(max(dot(refleDir,viewDir),0),material.shininess)*texture(material.specular,TexCoords).rgb*attenuation;

	return ambient+diffuse+specular;
}

vec3 CalcSpotLight(SpotLight spotLight,vec3 fragePos,vec3 normal,vec3 viewDir)
{
	vec3 lightDir=normalize(fragePos-spotLight.position);
	float theta=dot(lightDir,normalize(spotLight.direction));
	float epsilon=spotLight.cutOff-spotLight.outCutOff;
	float intensity=(theta-spotLight.outCutOff)/epsilon;
	intensity=clamp(intensity,0,1);

	vec3 diffuseTex=texture(material.diffuse,TexCoords).rgb;
	vec3 ambient=spotLight.ambient*diffuseTex;
	ambient*=intensity;

	vec3 diffuse=spotLight.diffuse*max(dot(-lightDir,normal),0)*diffuseTex;
	diffuse*=intensity;

	vec3 refleDir=reflect(-lightDir,normal);
	vec3 specular=spotLight.specular*pow(max(dot(refleDir,viewDir),0),material.shininess)*texture(material.specular,TexCoords).rgb;
	specular*=intensity;

	//光强度衰减系数
	float d=length(spotLight.position-fragePos);
	float attenuation=1/(spotLight.constant+spotLight.linear*d+spotLight.quadratic*d*d);
	ambient*=attenuation;
	diffuse*=attenuation;
	specular*=attenuation;

	return ambient+diffuse+specular;
}